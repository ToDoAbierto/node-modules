{
  "name": "sorted-intersect-stream",
  "version": "0.2.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/sorted-intersect-stream.git"
  },
  "license": "MIT",
  "description": "Intersect two streams that emit sorted data",
  "keywords": [
    "intersect",
    "sorted",
    "stream",
    "leveldb"
  ],
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "scripts": {
    "test": "node test.js"
  },
  "readme": "# sorted-intersect-stream\n\nIntersect two streams that emit sorted data\n\n\tnpm install sorted-intersect-stream\n\nThis module is similar to [sorted-intersect](https://github.com/mafintosh/sorted-intersect)\nexcept this intersects streams that emit sorted data instead of arrays of sorted data\n\n## Usage\n\nIt is easy to use\n\n``` js\nvar intersect = require('sorted-intersect-stream');\nvar es = require('event-stream'); // npm install event-stream\n\n// es.readArray converts an array into a stream\nvar sorted1 = es.readArray([0,10,24,42,43,50,55]);\nvar sorted2 = es.readArray([10,42,53,55,60]);\n\n// combine the two streams into a single intersected stream\nvar intersection = intersect(sorted1, sorted2);\n\nintersection.on('data', function(data) {\n\tconsole.log('intersected at '+data);\n});\nintersection.on('end', function() {\n\tconsole.log('no more intersections');\n});\n```\n\nRunning the above example will print\n\n```\nintersected at 10\nintersected at 42\nintersected at 55\nno more intersections\n```\n\nWhen the intersection ends the two input streams will be destroyed. Set`intersection.autoDestroy = false` to disable this.\n\n## Streaming objects\n\nIf you are streaming objects you should add a `toKey` function as the third parameter.\n`toKey` should return an key representation of the data that can be used to compare objects.\n\n_The keys MUST be sorted_\n\n``` js\nvar sorted1 = es.readArray([{key:'a'}, {key:'b'}, {key:'c'}]);\nvar sorted2 = es.readArray([{key:'b'}, {key:'d'}]);\n\nvar intersection = intersect(sorted1, sorted2, function(data) {\n\treturn data.key; // data.key is sorted\n});\n\nintersection.on('data', function(data) {\n\tconsole.log(data); // will print {key:'b'}\n});\n```\n\nA good use-case for this kind of module is implementing something like full-text search where you want to\nintersect multiple index hits.\n\n## Intersecting LevelDB streams\n\nSince [levelup](https://github.com/rvagg/node-levelup) streams are sorted in relation to their keys it is\neasy to intersect them using sorted-intersect-stream.\n\nIf we wanted to intersect two namespaces `foo` and `bar` we could do it like so\n\n``` js\nvar db = levelup('mydatabase', {valueEncoding:'json'});\n\nvar foo = db.createReadStream({\n\tstart: 'foo:',\n\tend: 'foo;'\n});\n\nvar bar = db.createReadStream({\n\tstart: 'bar:',\n\tend: 'bar;'\n});\n\nvar intersection = intersect(foo, bar, function(data) {\n\t// remove the namespace from the keys so they are comparable\n\treturn data.key.split(':').slice(1).join(':');\n});\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/sorted-intersect-stream/issues"
  },
  "_id": "sorted-intersect-stream@0.2.6",
  "_from": "sorted-intersect-stream@~0.2.5"
}
